import java.util.Random;
public class MergeSort 
{
 public static void merge(int[] arr, int low, int mid, int high) 
 {
 int n1 = mid - low + 1;
 int n2 = high - mid;
 int[] left = new int[n1];
 int[] right = new int[n2];
 for (int i = 0; i < n1; i++) 
 {
 left[i] = arr[low + i];
 }
 for (int i = 0; i < n2; i++) 
 {
 right[i] = arr[mid + 1 + i];
 }
 int i = 0, j = 0, k = low;
 while (i < n1 && j < n2) 
 {
 if (left[i] <= right[j]) 
 {
 arr[k] = left[i];
 i++;
 }
 else 
 {
arr[k] = right[j];
 j++;
 }
 k++;
 }
 while (i < n1) 
 {
 arr[k] = left[i];
 i++;
 k++;
 }
 while (j < n2) 
 {
 arr[k] = right[j];
 j++;
 k++;
 }
 }
 public static void mergeSort(int[] arr, int low, int high)
 {
 if (low < high) 
 {
 int mid = (low + high) / 2;
 mergeSort(arr, low, mid);
 mergeSort(arr, mid + 1, high);
 merge(arr, low, mid, high);
 }
 }
 public static void main(String[] args) 
{
 int[] nValues = { 1000, 2000, 3000, 4000, 5000 };
 long bestCaseTime = Long.MAX_VALUE;
 long worstCaseTime = Long.MIN_VALUE;
 long totalAverageTime = 0;
 for (int n : nValues) 
 {
 int[] arr = new int[n];
 Random rand = new Random();
 for (int i = 0; i < n; i++) 
 {
 arr[i] = rand.nextInt(10000);
 }
 long startTime = System.nanoTime();
 mergeSort(arr, 0, n - 1);
 long endTime = System.nanoTime();
 long elapsedTime = endTime - startTime; 
 totalAverageTime += elapsedTime;
 if (elapsedTime < bestCaseTime) 
 {
 bestCaseTime = elapsedTime;
 }
 if (elapsedTime > worstCaseTime) 
 {
 worstCaseTime = elapsedTime;
 }
 System.out.println("N=" + n + ", Time Taken: " + elapsedTime + " nanoseconds");
 }
 long averageTime = totalAverageTime / nValues.length;
  System.out.println("Best Case Time: " + bestCaseTime + " nanoseconds");
 System.out.println("Worst Case Time: " + worstCaseTime + " nanoseconds");
 System.out.println("Average Case Time: " + averageTime + " nanoseconds");
 }
}