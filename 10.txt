import java.util.*;
public class Main {
    static final int INF = Integer.MAX_VALUE;
    public static void dijkstra(int[][] graph, int source,int destination) {
        int n = graph.length;
        int[] dist = new int[n];
        Arrays.fill(dist, INF);
        dist[source] = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.offer(source);
        while (!pq.isEmpty()) {
            int curr = pq.poll();
            for (int neighbor = 0; neighbor < n; neighbor++) {
                if (graph[curr][neighbor] != INF) {
                    int newDist = dist[curr] + graph[curr][neighbor];
                    if (newDist < dist[neighbor]) {
                        dist[neighbor] = newDist;
                        pq.offer(neighbor);
                    }
                }
            }
        }
        
System.out.println("Shortest distance from source " + source + " to destination " + destination + ": " + dist[destination]);
        
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n = sc.nextInt(); 
        int[][] graph = new int[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                graph[i][j]=sc.nextInt();
            }
        }
        int source = sc.nextInt();
        int destination=sc.nextInt();
        dijkstra(graph, source, destination);
}
}
